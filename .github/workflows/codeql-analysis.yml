# Download, configure, and install OpenCV before building frank and then running CodeQL
# Relies on
#   Linux Ubuntu 20.04
#   OpenCV 4.2.0, 4.4.0...
#
name: "CodeQL"

on:
  push:
    branches: [master, ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [master]
  schedule:
    - cron: '0 19 * * 2'

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        # Supported version for OpenCV
        opencv: [
          4.2.0
        ]
        compiler: [g++]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        # We must fetch at least the immediate parents so that if this is
        # a pull request then we can checkout the head.
        fetch-depth: 2

    # If this run was triggered by a pull request event, then checkout
    # the head of the pull request instead of the merge commit.
    - run: git checkout HEAD^2
      if: ${{ github.event_name == 'pull_request' }}

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v1
      # Override language selection by uncommenting this and choosing your languages
      # with:
      #   languages: go, javascript, csharp, python, cpp, java

    - name: Install dev dependencies
      run: |
        # Install OpenCV dev libraries
        sudo add-apt-repository "deb http://security.ubuntu.com/ubuntu focal-security main"
        sudo apt-get update
        sudo apt-get remove x264 libx264-dev -y
        sudo apt-get install -y \
                build-essential checkinstall cmake pkg-config \
                git \
                libopencv-dev python3-opencv
                
    - name: Download Microsoft GSL
      run: |
        curl -sL https://github.com/microsoft/GSL/archive/master.zip > GSL.zip
        unzip -q GSL.zip

    - name: Install Microsoft GSL (${{ matrix.compiler }})
      run: |
        # Microsoft GSL install code
        cd GSL-master
        # Create a new 'build' folder.
        mkdir build
        cd build
        # Set build instructions for Ubuntu distro.
        nice cmake -D CMAKE_BUILD_TYPE=RELEASE \
              -D CMAKE_CXX_COMPILER=${{ matrix.COMPILER }} \
              -D CMAKE_INSTALL_PREFIX=/usr/local \
              ..
        nice make
        # Install to OS.
        sudo nice make install
        echo "Microsoft GSL installed."
        # We need to return to the repo "root" folder, so we can then 'cd' into the C++ project folder.
        cd ..
        
    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
    # If this step fails, then you should remove it and run the build manually (see below)
    - name: Autobuild
      uses: github/codeql-action/autobuild@v1

    # ‚ÑπÔ∏è Command-line programs to run using the OS shell.
    # üìö https://git.io/JvXDl

    # ‚úèÔ∏è If the Autobuild fails above, remove it and uncomment the following three lines
    #    and modify them (or add more) to build your code if your project
    #    uses a compiled language

    #- run: |
    #   make bootstrap
    #   make release

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v1
